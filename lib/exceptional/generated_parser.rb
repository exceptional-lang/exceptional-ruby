#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'
module Exceptional
  class GeneratedParser < Racc::Parser
##### State transition tables begin ###

racc_action_table = [
    12,    11,    13,    12,    11,    13,    12,    11,    13,    12,
    11,    13,    12,    11,    13,    12,    11,    13,    18,    19,
    18,    19,    16,    17,    18,    19,    14,    20 ]

racc_action_check = [
     0,     0,     0,     2,     2,     2,    16,    16,    16,    17,
    17,    17,    18,    18,    18,    19,    19,    19,    21,    21,
    22,    22,     4,     4,     5,     5,     1,    14 ]

racc_action_pointer = [
   -15,    26,   -12,   nil,    -3,    -3,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    27,   nil,    -9,    -6,    -3,     0,
   nil,    -9,    -7,   nil,   nil ]

racc_action_default = [
   -18,   -18,    -1,    -2,    -4,    -5,    -8,   -11,   -12,   -13,
   -14,   -15,   -16,   -17,   -18,    -3,   -18,   -18,   -18,   -18,
    25,    -6,    -7,    -9,   -10 ]

racc_goto_table = [
     3,     1,    15,    21,    22,    23,    24,     2 ]

racc_goto_check = [
     3,     1,     3,     5,     5,     6,     6,     2 ]

racc_goto_pointer = [
   nil,     1,     7,     0,   nil,   -13,   -13,   nil,   nil,   nil,
   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     4,     5,     6,     7,     8,     9,
    10 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 31, :_reduce_1,
  1, 32, :_reduce_2,
  2, 32, :_reduce_3,
  1, 33, :_reduce_none,
  1, 34, :_reduce_none,
  3, 34, :_reduce_6,
  3, 34, :_reduce_7,
  1, 35, :_reduce_none,
  3, 35, :_reduce_9,
  3, 35, :_reduce_10,
  1, 36, :_reduce_none,
  1, 37, :_reduce_none,
  1, 37, :_reduce_none,
  1, 37, :_reduce_none,
  1, 40, :_reduce_15,
  1, 38, :_reduce_16,
  1, 39, :_reduce_17 ]

racc_reduce_n = 18

racc_shift_n = 25

racc_token_table = {
  false => 0,
  :error => 1,
  :DEF => 2,
  :DO => 3,
  :END => 4,
  :RAISE => 5,
  :LPAREN => 6,
  :RPAREN => 7,
  :LBRACE => 8,
  :RBRACE => 9,
  :LBRACKET => 10,
  :RBRACKET => 11,
  :COMMA => 12,
  :PERIOD => 13,
  :HASHROCKET => 14,
  :STRING => 15,
  :IDENTIFIER => 16,
  :NUMBER => 17,
  :EQ => 18,
  :NEQEQ => 19,
  :GT => 20,
  :GTE => 21,
  :LT => 22,
  :LTE => 23,
  :COMPARATOR => 24,
  :PLUS => 25,
  :MINUS => 26,
  :TIMES => 27,
  :DIV => 28,
  :COMMENT => 29 }

racc_nt_base = 30

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "DEF",
  "DO",
  "END",
  "RAISE",
  "LPAREN",
  "RPAREN",
  "LBRACE",
  "RBRACE",
  "LBRACKET",
  "RBRACKET",
  "COMMA",
  "PERIOD",
  "HASHROCKET",
  "STRING",
  "IDENTIFIER",
  "NUMBER",
  "EQ",
  "NEQEQ",
  "GT",
  "GTE",
  "LT",
  "LTE",
  "COMPARATOR",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "COMMENT",
  "$start",
  "Program",
  "StatementList",
  "Statement",
  "AdditionStatement",
  "MultiplicativeStatement",
  "PrimaryStatement",
  "Value",
  "String",
  "Number",
  "Identifier" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'exceptional.y', 19)
  def _reduce_1(val, _values, result)
     result = Ast::BlockNode.new(expressions: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'exceptional.y', 23)
  def _reduce_2(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'exceptional.y', 24)
  def _reduce_3(val, _values, result)
     result = [*val[0], val[1]] 
    result
  end
.,.,

# reduce 4 omitted

# reduce 5 omitted

module_eval(<<'.,.,', 'exceptional.y', 33)
  def _reduce_6(val, _values, result)
     result = Ast::BinopNode.new(op: :+, left: val[0], right: val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'exceptional.y', 34)
  def _reduce_7(val, _values, result)
     result = Ast::BinopNode.new(op: :-, left: val[0], right: val[2]) 
    result
  end
.,.,

# reduce 8 omitted

module_eval(<<'.,.,', 'exceptional.y', 39)
  def _reduce_9(val, _values, result)
     result = Ast::BinopNode.new(op: :*, left: val[0], right: val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'exceptional.y', 40)
  def _reduce_10(val, _values, result)
     result = Ast::BinopNode.new(op: :'/', left: val[0], right: val[2]) 
    result
  end
.,.,

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

module_eval(<<'.,.,', 'exceptional.y', 54)
  def _reduce_15(val, _values, result)
     result = Ast::IdentifierNode.new(name: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'exceptional.y', 57)
  def _reduce_16(val, _values, result)
     result = Ast::StringNode.new(value: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'exceptional.y', 61)
  def _reduce_17(val, _values, result)
     result = Ast::NumberNode.new(value: val[0]) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class GeneratedParser
  end   # module Exceptional
